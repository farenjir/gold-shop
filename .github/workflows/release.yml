name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Create release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          else
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          fi

          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in this Release

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Installation

            ```bash
            npm install
            ```

            ## Build

            ```bash
            npx nx build @gold-shop/gold-shop
            npx nx build @gold-shop/gold-admin
            ```
          draft: false
          prerelease: false

  # Build and upload artifacts
  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nx/cache
            .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Build gold-shop
        run: npx nx build @gold-shop/gold-shop --configuration=production

      - name: Build gold-admin
        run: npx nx build @gold-shop/gold-admin --configuration=production

      - name: Export gold-shop
        run: npx nx export @gold-shop/gold-shop

      - name: Export gold-admin
        run: npx nx export @gold-shop/gold-admin

      - name: Create distribution archive
        run: |
          tar -czf gold-shop-${{ steps.version.outputs.VERSION }}.tar.gz -C dist/apps/gold-shop .
          tar -czf gold-admin-${{ steps.version.outputs.VERSION }}.tar.gz -C dist/apps/gold-admin .

      - name: Upload gold-shop artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./gold-shop-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_name: gold-shop-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload gold-admin artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./gold-admin-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_name: gold-admin-${{ steps.version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip

  # Publish to npm (if needed)
  publish-npm:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: |
          npx nx build @gold-shop/shared-icons
          npx nx build @gold-shop/shared-provider
          npx nx build @gold-shop/shared-types
          npx nx build @gold-shop/shared-ui
          npx nx build @gold-shop/shared-utils
          npx nx build @gold-shop/shared-data-access

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
