name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check if PR is ready for review
  pr-ready-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        uses: actions/github-script@v8
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const totalChanges = files.reduce((acc, file) => acc + file.changes, 0);
            const maxChanges = 1000;

            if (totalChanges > maxChanges) {
              core.setFailed(`PR is too large: ${totalChanges} changes (max: ${maxChanges})`);
            }

      - name: Check for large files
        uses: actions/github-script@v8
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const largeFiles = files.filter(file => file.changes > 10000);

            if (largeFiles.length > 0) {
              const fileList = largeFiles.map(f => `- ${f.filename} (${f.changes} lines)`).join('\n');
              core.setFailed(`Large files detected:\n${fileList}`);
            }

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint changed files
        run: |
          npx nx affected --target=lint --base=origin/main

      - name: Type check changed files
        run: |
          npx nx affected --target=typecheck --base=origin/main

      - name: Test changed files
        run: |
          npx nx affected --target=test --base=origin/main

  # Build affected projects
  build-affected:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nx/cache
            .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Build affected projects
        run: |
          npx nx affected --target=build --base=origin/main

  # E2E tests for affected projects
  e2e-affected:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nx/cache
            .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('**/nx.json', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests for affected projects
        run: |
          npx nx affected --target=e2e --base=origin/main

  # Comment PR with results
  comment-results:
    runs-on: ubuntu-latest
    needs: [code-quality, build-affected, e2e-affected]
    if: always()
    steps:
      - name: Comment PR
        uses: actions/github-script@v8
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Check Results')
            );

            const status = {
              'code-quality': '${{ needs.code-quality.result }}',
              'build-affected': '${{ needs.build-affected.result }}',
              'e2e-affected': '${{ needs.e2e-affected.result }}'
            };

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                default: return '⏳';
              }
            };

            const body = `## PR Check Results

            | Check | Status |
            |-------|--------|
            | Code Quality | ${statusEmoji(status['code-quality'])} ${status['code-quality']} |
            | Build Affected | ${statusEmoji(status['build-affected'])} ${status['build-affected']} |
            | E2E Affected | ${statusEmoji(status['e2e-affected'])} ${status['e2e-affected']} |

            ${Object.values(status).some(s => s === 'failure') ? 
              '❌ Some checks failed. Please review the logs.' : 
              '✅ All checks passed!'}
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
